################################################################################
    
    NFV HA를 테스트하기 위해서 필요한 환경을 생성하는 시나리오
        
################################################################################

    * 전제조건
    - red, orange, green network을 tenant network로 제공할 수 있도록 VLAN으로
      TOR (ex: Aristar) 스위치와 openstack neutron network가 구성되어 있어야 한다.
    - TOR 스위치가 master utm vm이나 host 장애시,
        먼저 장애가 발생한 호스트 관련 vlan들을 drop 시키고,
        master에 할당된 VLAN들을 slave utm 쪽으로 절체할 수 있어야 한다.
        이때 red vlan 2000번은 공용이므로 절체할 필요가 없다.
        나머지 orange, green만 절체하면 된다.(현재까지 나의 지식으로는 ...)
    
    * 시나리오
    
        1. 고객 계정 및 권한 생성
        
        2. 고객계정으로 red, orange, green 네트워크를 2개씩(master/slave) 생성
            ex) 정책을 정해야 하나 기본적으로 하나의 고객에 6개의 vlan 필요
                master는 홀수, slave는 짝수를 부여
                - mgmt_master   : ex) vlan 2002(shared)
                - mgmt_slave    : ex) vlan 2002(shared)
                
                - red_master    : ex) vlan 2000(shared)
                - red_slave     : ex) vlan 2000(shared)
                - orange_master : ex) vlan 113
                - orange_slave  : ex) vlan 113
                - green_master  : ex) vlan 114
                - green_slave   : ex) vlan 114    
            
        3. UTM VM을 2개(master/slave) 생성 
            - 각 VM은 global_mgmt_net, green_master, orange_master, red_master 4개의 nic 을 갖는다.
            - red/orange/green은 master/slave 에 동일한 IP를 부여한다.
            - mgmt는 master/slave에 다른 IP를 부여한다.
            - green과 orange는 bridge를 사용하여 연결하고 하나의 IP(192.168.0.11)를 제공한다.
                                            
            - master는 cnode01에 VM을 생성한다.
                ex) master_global_mgmt_nic(10.0.0.11) -> vlan 2002(shared)
                    master_red_nic(172.0.0.11)        -> vlan 2000(shared)
                                        
                    master_orange_nic(bridge to green)-> vlan 113  ==> 192.168.0.11
                    master_green_nic(bridge to orange)-> vlan 114
                    
            - slave는 cnode02에 VM을 생성한다.
                ex) slave_global_mgmt_nic(10.0.0.12) -> vlan 2002(shared)
                    slave_red_nic(172.0.0.11)        -> vlan 2000(shared)                    
                    
                    slave_orange_nic(bridge to green)-> vlan 113  ==> 192.168.0.11
                    slave_green_nic(bridge to orange)-> vlan 114
                      
            - 주의: LJG:: mgmt는 제어를 위해 master/slave에 다른 IP를 부여하고 
                    나머지 NIC은 이중화를 위하여 master/slave 모두 동일한 IP를 부여해야 한다.
                    그러나, Openstack에서는 동일네트워크에 동일 IP를 부여하지 않으므로, 
                    처음에는 master와 slave nic에 오픈스택 CLI를 이용하여 다른 IP를 부여한다.
                    그리고 오케스트레이터에서 ssh 명령을 통해서 slave에 할당된 기존 IP를 지우고
                    강제로 master nic과 동일한 IP를 할당한다.
            
        4. TOR 스위치 Controller 연동 및 slave vlan disable            
            - LJG: 고려사항: 스위치의 물리포트와 호스트 물리포트 사이의 매핑테이블 관리가 필요
                             (orchestrator가 이걸 관리해야 함)  
            - 오케스트레이터가 TOR 스위치 Controller와 연동하여 아래와 같은 정보를 넘긴다.
                - slave VM이 설치된 호스트의 물리포트와 연결된 TOR 물리포트
                - slave VM이 사용중인 vlan들 중에 deactivate 시켜야될 리스트(vlan 113, 114)
                  management 용으로 할당된 vlan 2002번은 activate가 되어있어야 한다. 그래야 master<->standby 동기화가 가능
                  public 용으로 할당된 vlan 2000번은 shared이므로 해당 노드의 다른 VM들이 사용할 수 있으므로
                        호스트가 죽은경우가 아니면 deactivate하면 안된다.            
                - 이중화를 위한 VM 초기화시 다음과 같은 포맷으로 요청
                 1. request_nfv_ha_init(
                    {
                        req_id: '1111-2222-3333-4444',
                        vm_name: 'forbiz_utm',
                        master_switch_physical_port: 22,                        
                        slave_switch_physical_port: 24,
                        current_vlans: {
                            orange: 'vlan113',
                            green: 'vlan114'
                        }
                    }
                 2. request_nfv_ha_init_result({req_id: '1111-2222-3333-4444'}) -> 5초 주기로 폴링
                    성공메시지를 받으면 다음 단계로 넘어감
                    
            - TOR 스위치 Controller는 해당 정보를 바탕으로 특정 물리포트에 설정된 vlan(113,114)들을 deactivate 시킨다.
            
        5. 고객 서버(orange) VM을 cnode03 에 하나 생성
            - VM은 global_mgmt_net, orange_master 2개의 nic 을 갖는다.
                global_mgmt_net(10.10.10.21)
                orange_master(192.168.0.21) -> vlan 113
            - cnode03 서버에 생성한다.
            - orange(vlan 113)의 gateway를 설정한다. -> master UTM VM(192.168.0.11)
                ->orange server에서 외부로 나갈때는 UTM을 통해 nat 된다.
            - master UTM VM을 통해 클라이언트 VM(green vm)과 통신할 수 있도록 서버를 실행한다. (iperf -s -p 5001)
            - master UTM VM을 통해 외부 서버 VM(red vm)와 통신할 수 있도록 서버를 실행한다. (iperf -s -p 5002)
    
        6. 고객 클라이언트(green) VM을 cnode03에 하나 생성
            - VM은 global_mgmt_net, green_master 2개의 nic 을 갖는다.
                global_mgmt_net(10.10.10.31)
                green_master(192.168.0.31)  -> vlan 114
            - cnode03 서버에 생성한다.
            - green(vlan 114)의 gateway를 설정한다. -> master UTM VM(192.168.0.11)
                ->green vm에서 외부로 나갈때는 UTM을 통해 nat 된다.
            - master UTM VM을 통해 서버팜 서버(orange vm)과 통신할 수 있도록 클라이언트를 실행한다. (iperf -c 192.168.0.21 -p 5001)
            - master UTM VM을 통해 외부 서버 (red vm)와 통신할 수 있도록 클라이언트를 실행한다. (iperf -c 172.0.0.21 -p 5001)
            
        7. 외부 서버(red) VM을 cnode03에 하나 생성
            - 각 VM은 global_mgmt_net, red_master 2개의 nic 을 갖는다.
                global_mgmt_net(10.10.10.41)
                red_master(172.0.0.21) -> vlan 2000          
            - cnode03 서버에 생성한다.
            - master UTM VM을 통해 클라이언트 VM(green vm)과 통신할 수 있도록 서버를 실행한다. (iperf -s -p 5001)
            - master UTM VM을 통해 서버팜 서버 VM(orange vm)와 통신할 수 있도록 서버를 실행한다. (iperf -s -p 5002)
        
        8. cnode01(master)에 장애발생시킴
            - server restart, nic down, 등의 시나리오
            
        9. 모니터링 기능을 수행하는 orchestrator가 장애를 감지하고 TOR 스위치 Controller에 FailOver를 요청한다.
        
           - TOR 스위치 controller server에 다름과 같이 장애이벤트를 발송
                - VM 장애시 다음과 같은 포맷으로 요청 
                 1. request_nfv_ha_failover(
                    {
                        req_id: '1111-2222-3333-5555',
                        vm_name: 'forbiz_utm',
                        master_switch_physical_port: 22,                        
                        slave_switch_physical_port: 24,
                        current_vlans: {
                            orange: 'vlan113',
                            green: 'vlan114'
                        }
                    }
                 2. request_nfv_ha_failover_result({req_id: '1111-2222-3333-5555'}) -> 5초 주기로 폴링
                    성공메시지를 받으면 다음 단계로 넘어감
            - TOR 스위치 controller가 TOR 스위치에 명령을 내려 
                master_switch_physical_port의 vlan들(orange, green)은 deactivate하고
                slave_switch_physical_port의 vlan들(orange, green)은 activate 시킨다.
             
        10. cnode02(slave)를 통해 red, orange, green vm들의 통신이 seamless 하게 이루어지는지 확인
            - green  <-> oragne 통신 확인
            - green  <-> red 통신 확인
            - orange <-> red 통신 확인
        















        

    * 테스트 구현 소스 설명
        common_env에 설정된 고객정보를 참조하여 아래 명령 실행
        1. 1make_account_and_security.sh    
            - 고객과 관련된 계정을 생성하고 권한을 부여한다.
                - 계정(tenant/user/password)    ex) forbiz/forbiz/forbiz1234
                - 권한(member)                  ex) member
                - keypair/keypair.pub           ex)forbizkey/forbizkey.pub
                - security group(default)       ex)icmp, tcp(22,80,443,5001)
        
        2. 2change_quota.sh    
            - 고객과 관련된 Quota를 적절하게 조정한다.(기본적으로 10배씩 증가시킴)
                - nova      ex) instances 100/cores 200/ram 512000/floating-ips 100/metadata_items 1280/injected_files 50
                - neutron   ex) floatingip 500/network 100/port 5000/router 100/security_group 100/security_group_rule 1000 
                - cinder    ex) gigabytes 10000/snapshots 100/volumes 100
        
        3. 3make_default_network.sh    
            - 일반적으로 클라우드에서 제공하는 network 환경을 제공한다.
                - guest_network         ex) forbiz_guest_net
                - guest_subnetwork      ex) forbiz_guest_subnet
                - guest_router          ex) forbiz_guest_router
                - guest_router에 guest_subnetwork interface 연결
                - guest_router에 public gateway 설정
        
        4. 4make_hybrid_network.sh    
            - UTM HA 테스트를 위한 hybrid network 환경을 제공한다.
              
              주의: orange network도 green과 동일 ip 대역을 할당한다.

            (*) master network 생성
                              
                - master_red_network           ex) forbiz_master_red_net
                - master_red_subnetwork        ex) forbiz_master_red_subnet
              
                - master_green_network         ex) forbiz_master_green_net
                - master_green_subnetwork      ex) forbiz_master_green_subnet
                
                - master_orange_network        ex) forbiz_master_orange_net
                - master_orange_subnetwork     ex) forbiz_master_orange_subnet
        
            (*) slave network 생성
                - slave_red_network           ex) forbiz_slave_red_net
                - slave_red_subnetwork        ex) forbiz_slave_red_subnet
              
                - slave_green_network         ex) forbiz_slave_green_net
                - slave_green_subnetwork      ex) forbiz_slave_green_subnet
                
                - slave_orange_network        ex) forbiz_slave_orange_net
                - slave_orange_subnetwork     ex) forbiz_slave_orange_subnet
        
        
        5. 5make_vm_for_ha_test.sh            
                
            - UTM 테스트를 위한 vm들을 만든다
            
                - master UTM VM 생성
                    - global_mgmt, master_green, master_orange, master_red 4개의 nic 을 갖는다.
                    - cnode01 서버에 생성한다.        
                    - UTM Firewall 시뮬레이트(red/orange/green을 어떻게 routing 하지??)
                        - bridge를 이용하여 eth1(green)과 eth2(orange)를 연결한다
                    - fixed_ip를 제공하여 VM 생성
                    - 동적으로 생성된 userdata file 사용
        
                - slave UTM VM 생성
                    - global_mgmt, slave_green, slave_orange, slave_red 4개의 nic 을 갖는다.
                    - cnode02 서버에 생성한다.        
                    - UTM Firewall 시뮬레이트(red/orange/green을 어떻게 routing 하지??)
                        - bridge를 이용하여 eth1(green)과 eth2(orange)를 연결한다
                    - fixed_ip를 제공하여 VM 생성
                    - 동적으로 생성된 userdata file 사용
                    
                - Green 고객 클라이언트 VM 생성
                    - global_mgmt, master_green 2개의 nic 을 갖는다.
                    - cnode03 서버에 생성한다.
                    - master_UTM VM을 green interface의 gateway로 설정한다                        
                    - master UTM VM을 통해 고객 서버 VM(orange vm)에 통신한다. (iperf client 이용)
                    - master UTM VM을 통해 외부 서버 VM(red vm)에 통신한다. (iperf client 이용)
                    - fixed_ip를 제공하여 VM 생성
                    - 동적으로 생성된 userdata file 사용
                    
                - Orange 고객 서버 VM 생성
                    - global_mgmt, master_orange 2개의 nic 을 갖는다.
                    - cnode03 서버에 생성한다.
                    - master_UTM VM을 orange interface의 gateway로 설정한다
                    - master UTM VM을 통해 클라이언트 VM(green vm)과 통신한다. (iperf server 이용)
                    - master UTM VM을 통해 외부 서버 VM(red vm)에 통신한다. (iperf client 이용)
                    - fixed_ip를 제공하여 VM 생성
                    - 동적으로 생성된 userdata file 사용
                    - userdata를 이용하여 iperf를 백그라운드로 실행
                    
                - RED 외부 서버 VM 생성
                    - global_mgmt, master_red 2개의 nic 을 갖는다.
                    - cnode03 서버에 생성한다.
                    - master_UTM VM을 red interface의 gateway로 설정한다
                    - master UTM VM을 통해 클라이언트 VM(green vm)과 통신한다. (iperf server 이용)
                    - master UTM VM을 통해 고객서버 VM(orange vm)과 통신한다. (iperf server 이용)
                    - fixed_ip를 제공하여 VM 생성
                    - 동적으로 생성된 userdata file 사용
                    - userdata를 이용하여 iperf를 백그라운드로 실행                        
        
                
                
                
                                    